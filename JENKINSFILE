pipeline {
    agent any

    stages {
        stage('GetCode') {
            steps {
                git 'https://github.com/jmpanper/jmpanadero-helloworld'
                bat 'dir'
                echo "WORKSPACE: ${WORKSPACE}"
            }
        }
        stage('Tests'){
            parallel
            {

            stage('Unit'){
                steps {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                        bat '''
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-unit.xml test\\unit
                        '''
                        junit 'result*.xml'
                    }
                }
            }
                
                        
                stage('Rest') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                set FLASK_APP=app\\api.py
                                start flask run
                                start /B java -jar C:\\repos\\wiremock\\wiremock-standalone-3.10.0.jar --port 9090 --root-dir test\\wiremock
                                
                                ping -n 10 127.0.0.1
                                
                                pytest --junitxml=result-rest.xml test\\rest
                            '''
                        }
                    }
                }        
            }
        }
            
            
        stage('Coverage'){
            steps{
                bat '''
                    coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                    coverage xml
                '''
                
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                    cobertura coberturaReportFile: 'coverage.xml', 
                    conditionalCoverageTargets: '100,0,80', 
                    lineCoverageTargets: '100,0,90'
                }
            }
        }
        stage('Static'){
            steps{
                bat '''
                    flake8 --exit-zero --format=pylint app >flake8.out
                '''

                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], 
                    qualityGates: [
                        [threshold: 8, type: 'TOTAL', unstable: true],
                        [threshold: 10, type: 'TOTAL', unhealthy: true]
                    ]

            }
        }
        stage('Security'){
            steps{
                bat '''
                    bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], 
                    qualityGates: [
                        [threshold: 2, type: 'TOTAL', unstable: true],
                        [threshold: 4, type: 'TOTAL', unstable: false]
                    ]
            }
        }
        stage('Performance'){
            steps{
                bat '''
                    set FLASK_APP=app\\api.py
                    start flask run
                    ping -n 10 127.0.0.1
                    C:\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl
                '''
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
    }
}
